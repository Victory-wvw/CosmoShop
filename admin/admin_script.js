// –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å CosmoShop
class AdminPanel {
    constructor() {
        this.currentProduct = null;
        this.currentUser = null;
        this.currentCategory = null;
        this.uploadedImageName = null;
        this.currentPage = {
            orders: 1,
            products: 1,
            users: 1,
            categories: 1
        };
        this.itemsPerPage = 10;
        this.sortConfig = {};
        this.init();
    }

    init() {
        this.initializeData();
        this.setupNavigation();
        this.setupEventListeners();
        this.showSectionFromHash();
        console.log(' –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }

    initializeData() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if (!localStorage.getItem('admin_orders')) {
            this.initializeSampleData();
        }
    }

    initializeSampleData() {
        const sampleOrders = [
            {
                id: 1007,
                user_id: 1,
                user_name: "–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞",
                user_email: "anna@mail.ru",
                items: [
                    { name: "–ü–∞—Ä—Ñ—é–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–æ–¥–∞", quantity: 1, price: 4500 },
                    { name: "–¢—É—à—å –¥–ª—è —Ä–µ—Å–Ω–∏—Ü", quantity: 2, price: 890 }
                ],
                total: 6280,
                status: "delivered",
                created: "2024-01-15T14:30:00Z",
                address: "–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 10"
            },
            {
                id: 1006,
                user_id: 2,
                user_name: "–ò–≤–∞–Ω –°–∏–¥–æ—Ä–æ–≤",
                user_email: "ivan@mail.ru",
                items: [
                    { name: "–ö—Ä–µ–º –¥–ª—è –ª–∏—Ü–∞", quantity: 1, price: 1500 },
                    { name: "–®–∞–º–ø—É–Ω—å –¥–ª—è –æ–±—ä–µ–º–∞", quantity: 1, price: 750 }
                ],
                total: 2250,
                status: "shipped",
                created: "2024-01-14T11:15:00Z",
                address: "–≥. –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ø—Ä. –ü—Ä–∏–º–µ—Ä–Ω—ã–π, –¥. 25"
            }
        ];

        const sampleProducts = [
            {
                id: 1,
                name: "–ú–∞—Ç–æ–≤–∞—è –ø–æ–º–∞–¥–∞ \"Velvet\"",
                brand: "L'Oreal",
                price: 1200,
                category_id: 1,
                description: "–ú–∞—Ç–æ–≤–æ–µ –ø–æ–º–∞–¥–∞ —Å –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–º —Ü–≤–µ—Ç–æ–º –∏ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–º —Å—Ä–æ–∫–æ–º –Ω–æ—Å–∫–∏.",
                stock_quantity: 15,
                status: "active",
                image: "../images/product1.jpg",
                created: "2024-01-10T10:00:00Z"
            },
            {
                id: 2,
                name: "–¢—É—à—å –¥–ª—è —Ä–µ—Å–Ω–∏—Ü –í–µ–µ—Ä–Ω—ã–π –æ–±—ä—ë–º",
                brand: "Maybelline",
                price: 890,
                category_id: 1,
                description: "–¢—É—à—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–º–∞ –∏ –¥–ª–∏–Ω—ã —Ä–µ—Å–Ω–∏—Ü.",
                stock_quantity: 22,
                status: "active",
                image: "../images/product2.jpg",
                created: "2024-01-10T10:00:00Z"
            }
        ];

        const sampleUsers = [
            {
                id: 1,
                name: "–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞",
                email: "anna@mail.ru",
                phone: "+7 (999) 123-45-67",
                role: "user",
                orders_count: 3,
                status: "active",
                registered: "2024-01-10T09:00:00Z",
                address: "–≥. –ú–æ—Å–∫–≤–∞"
            },
            {
                id: 2,
                name: "–ò–≤–∞–Ω –°–∏–¥–æ—Ä–æ–≤",
                email: "ivan@mail.ru",
                phone: "+7 (999) 234-56-78",
                role: "user",
                orders_count: 1,
                status: "active",
                registered: "2024-01-12T11:00:00Z",
                address: "–≥. –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"
            }
        ];

        localStorage.setItem('admin_orders', JSON.stringify(sampleOrders));
        localStorage.setItem('admin_products', JSON.stringify(sampleProducts));
        localStorage.setItem('admin_users', JSON.stringify(sampleUsers));
    }

    setupNavigation() {
        const navLinks = document.querySelectorAll('.nav-link');
        navLinks.forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                const target = link.getAttribute('href').substring(1);
                this.showSection(target);
            });
        });

        window.addEventListener('hashchange', () => {
            this.showSectionFromHash();
        });
    }

    showSectionFromHash() {
        const hash = window.location.hash.substring(1) || 'orders';
        this.showSection(hash);
    }

    showSection(sectionId) {
        document.querySelectorAll('.admin-section').forEach(section => {
            section.classList.remove('active');
        });

        document.querySelectorAll('.nav-link').forEach(link => {
            link.classList.remove('active');
        });

        const targetSection = document.getElementById(sectionId);
        const targetLink = document.querySelector(`[href="#${sectionId}"]`);

        if (targetSection && targetLink) {
            targetSection.classList.add('active');
            targetLink.classList.add('active');
            this.loadSectionData(sectionId);
        }
    }

    loadSectionData(sectionId) {
        switch(sectionId) {
            case 'orders':
                this.loadOrdersData();
                break;
            case 'products':
                this.loadProductsData();
                break;
            case 'users':
                this.loadUsersData();
                break;
        }
    }

    setupEventListeners() {
        // –ü–æ–∏—Å–∫
        document.getElementById('searchOrders')?.addEventListener('input', (e) => {
            this.searchTable('orders', e.target.value);
        });
        document.getElementById('searchProducts')?.addEventListener('input', (e) => {
            this.searchTable('products', e.target.value);
        });
        document.getElementById('searchUsers')?.addEventListener('input', (e) => {
            this.searchTable('users', e.target.value);
        });
        document.getElementById('searchCategories')?.addEventListener('input', (e) => {
            this.searchTable('categories', e.target.value);
        });

        // –§–∏–ª—å—Ç—Ä—ã
        document.getElementById('orderStatusFilter')?.addEventListener('change', (e) => {
            this.filterOrdersByStatus(e.target.value);
        });

        // –§–æ—Ä–º—ã
        document.getElementById('productForm')?.addEventListener('submit', (e) => {
            e.preventDefault();
            this.saveProduct();
        });
        document.getElementById('userForm')?.addEventListener('submit', (e) => {
            e.preventDefault();
            this.saveUser();
        });
        document.getElementById('categoryForm')?.addEventListener('submit', (e) => {
            e.preventDefault();
            this.saveCategory();
        });

        // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        document.getElementById('imageUpload')?.addEventListener('change', (e) => {
            this.handleImageUpload(e.target.files[0]);
        });
    }

    // === –ó–ê–ö–ê–ó–´ ===
    loadOrdersData() {
        const orders = this.getOrders();
        this.renderOrdersTable(orders);
        this.updatePagination('orders', orders.length);
    }

    getOrders() {
        return JSON.parse(localStorage.getItem('admin_orders') || '[]');
    }

    renderOrdersTable(orders) {
        const tbody = document.getElementById('ordersTable');
        if (!tbody) return;

        const startIndex = (this.currentPage.orders - 1) * this.itemsPerPage;
        const paginatedOrders = orders.slice(startIndex, startIndex + this.itemsPerPage);

        if (paginatedOrders.length === 0) {
            tbody.innerHTML = '<tr><td colspan="7" class="loading-text">–ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</td></tr>';
            return;
        }

        tbody.innerHTML = paginatedOrders.map(order => `
            <tr>
                <td><strong>#${order.id}</strong></td>
                <td>
                    <div class="user-info">
                        <strong>${order.user_name}</strong><br>
                        <small>${order.user_email}</small>
                    </div>
                </td>
                <td>
                    <small>${order.items.map(item => `${item.name} (${item.quantity} —à—Ç.)`).join(', ')}</small>
                </td>
                <td><strong>${order.total} —Ä—É–±.</strong></td>
                <td>
                    <select class="status-select" onchange="updateOrderStatus(${order.id}, this.value)" 
                            style="background: ${this.getStatusColor(order.status)}; color: white; border: none; padding: 0.3rem 0.5rem; border-radius: 4px;">
                        <option value="pending" ${order.status === 'pending' ? 'selected' : ''}>–û–∂–∏–¥–∞–Ω–∏–µ</option>
                        <option value="confirmed" ${order.status === 'confirmed' ? 'selected' : ''}>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω</option>
                        <option value="shipped" ${order.status === 'shipped' ? 'selected' : ''}>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω</option>
                        <option value="delivered" ${order.status === 'delivered' ? 'selected' : ''}>–î–æ—Å—Ç–∞–≤–ª–µ–Ω</option>
                        <option value="cancelled" ${order.status === 'cancelled' ? 'selected' : ''}>–û—Ç–º–µ–Ω–µ–Ω</option>
                    </select>
                </td>
                <td>${this.formatDate(order.created)}</td>
                <td>
                    <button class="btn btn-view" onclick="viewOrderDetails(${order.id})" title="–ü—Ä–æ—Å–º–æ—Ç—Ä">üëÅÔ∏è</button>
                    <button class="btn btn-edit" onclick="editOrder(${order.id})" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
                    <button class="btn btn-delete" onclick="deleteOrder(${order.id})" title="–£–¥–∞–ª–∏—Ç—å">üóëÔ∏è</button>
                </td>
            </tr>
        `).join('');
    }

    // === –¢–û–í–ê–†–´ ===
    loadProductsData() {
        const products = this.getProducts();
        this.renderProductsTable(products);
        this.updatePagination('products', products.length);
        this.loadCategoriesForSelect();
    }

    getProducts() {
        return JSON.parse(localStorage.getItem('admin_products') || '[]');
    }

    renderProductsTable(products) {
        const tbody = document.getElementById('productsTable');
        if (!tbody) return;

        const startIndex = (this.currentPage.products - 1) * this.itemsPerPage;
        const paginatedProducts = products.slice(startIndex, startIndex + this.itemsPerPage);

        if (paginatedProducts.length === 0) {
            tbody.innerHTML = '<tr><td colspan="9" class="loading-text">–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</td></tr>';
            return;
        }

        tbody.innerHTML = paginatedProducts.map(product => `
            <tr>
                <td>${product.id}</td>
                <td>
                    <img src="${this.getProductImageUrl(product.image)}" alt="${product.name}" 
                         class="product-thumb" onerror="this.src='https://via.placeholder.com/50x50/FFE8E8/333?text=IMG'">
                </td>
                <td>${product.brand}</td>
                <td><strong>${product.price} —Ä—É–±.</strong></td>
                <td>${this.getCategoryName(product.category_id)}</td>
                <td>
                    <span class="${product.stock_quantity > 10 ? 'status-delivered' : product.stock_quantity > 0 ? 'status-pending' : 'status-cancelled'}">
                        ${product.stock_quantity} —à—Ç.
                    </span>
                </td>
                <td>
                    <span class="${product.status === 'active' ? 'status-active' : 'status-inactive'}">
                        ${product.status === 'active' ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
                    </span>
                </td>
                <td>
                    <button class="btn btn-edit" onclick="editProduct(${product.id})" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
                    <button class="btn btn-delete" onclick="deleteProduct(${product.id})" title="–£–¥–∞–ª–∏—Ç—å">üóëÔ∏è</button>
                </td>
            </tr>
        `).join('');
    }

    // === –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò ===
    loadUsersData() {
        const users = this.getUsers();
        this.renderUsersTable(users);
        this.updatePagination('users', users.length);
    }

    getUsers() {
        return JSON.parse(localStorage.getItem('admin_users') || '[]');
    }

    renderUsersTable(users) {
        const tbody = document.getElementById('usersTable');
        if (!tbody) return;

        const startIndex = (this.currentPage.users - 1) * this.itemsPerPage;
        const paginatedUsers = users.slice(startIndex, startIndex + this.itemsPerPage);

        if (paginatedUsers.length === 0) {
            tbody.innerHTML = '<tr><td colspan="9" class="loading-text">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</td></tr>';
            return;
        }

        tbody.innerHTML = paginatedUsers.map(user => `
            <tr>
                <td>${user.id}</td>
                <td>
                    <strong>${user.name}</strong><br>
                    <small>${user.address}</small>
                </td>
                <td>${user.email}</td>
                <td>${user.phone}</td>
                <td>${this.formatDate(user.registered)}</td>
                <td><strong>${user.orders_count}</strong></td>
                <td>
                    <span class="${user.status === 'active' ? 'status-active' : 'status-inactive'}">
                        ${user.status === 'active' ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
                    </span>
                </td>
                <td>
                    <button class="btn btn-view" onclick="viewUser(${user.id})" title="–ü—Ä–æ—Å–º–æ—Ç—Ä">üëÅÔ∏è</button>
                    <button class="btn btn-edit" onclick="editUser(${user.id})" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
                </td>
            </tr>
        `).join('');
    }

    // === –ö–ê–¢–ï–ì–û–†–ò–ò ===
    loadCategoriesData() {
        const categories = this.getCategories();
        this.renderCategoriesTable(categories);
    }

    getCategories() {
        return JSON.parse(localStorage.getItem('admin_categories') || '[]');
    }

    renderCategoriesTable(categories) {
        const tbody = document.getElementById('categoriesTable');
        if (!tbody) return;

        if (categories.length === 0) {
            tbody.innerHTML = '<tr><td colspan="7" class="loading-text">–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</td></tr>';
            return;
        }

        tbody.innerHTML = categories.map(category => `
            <tr>
                <td>${category.id}</td>
                <td><strong>${category.name}</strong></td>
                <td><code>${category.slug}</code></td>
                <td><strong>${category.product_count}</strong></td>
                <td>
                    <span class="${category.status === 'active' ? 'status-active' : 'status-inactive'}">
                        ${category.status === 'active' ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}
                    </span>
                </td>
                <td>${this.formatDate(category.created)}</td>
                <td>
                    <button class="btn btn-edit" onclick="editCategory(${category.id})" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
                    <button class="btn btn-delete" onclick="deleteCategory(${category.id})" title="–£–¥–∞–ª–∏—Ç—å">üóëÔ∏è</button>
                </td>
            </tr>
        `).join('');
    }

    // === –ü–û–ò–°–ö –ò –§–ò–õ–¨–¢–†–ê–¶–ò–Ø ===
    searchTable(tableType, query) {
        let data = [];
        switch (tableType) {
            case 'orders': data = this.getOrders(); break;
            case 'products': data = this.getProducts(); break;
            case 'users': data = this.getUsers(); break;
            case 'categories': data = this.getCategories(); break;
        }

        const filteredData = data.filter(item => 
            JSON.stringify(item).toLowerCase().includes(query.toLowerCase())
        );

        this.renderFilteredTable(tableType, filteredData);
    }

    renderFilteredTable(tableType, data) {
        const tbody = document.getElementById(`${tableType}Table`);
        if (!tbody) return;

        if (data.length === 0) {
            tbody.innerHTML = '<tr><td colspan="10" class="loading-text">–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</td></tr>';
            return;
        }

        // –í—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        switch (tableType) {
            case 'orders': this.renderOrdersTable(data); break;
            case 'products': this.renderProductsTable(data); break;
            case 'users': this.renderUsersTable(data); break;
        }
    }

    filterOrdersByStatus(status) {
        const orders = this.getOrders();
        const filteredOrders = status ? orders.filter(order => order.status === status) : orders;
        this.renderOrdersTable(filteredOrders);
    }

    // === –ü–ê–ì–ò–ù–ê–¶–ò–Ø ===
    updatePagination(tableType, totalItems) {
        const pagination = document.getElementById(`${tableType}Pagination`);
        if (!pagination) return;

        const totalPages = Math.ceil(totalItems / this.itemsPerPage);
        const pageInfo = pagination.querySelector('.page-info');
        
        if (pageInfo) {
            pageInfo.textContent = `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${this.currentPage[tableType]} –∏–∑ ${totalPages}`;
        }

        const prevBtn = pagination.querySelector('button:first-child');
        const nextBtn = pagination.querySelector('button:last-child');

        if (prevBtn) prevBtn.disabled = this.currentPage[tableType] <= 1;
        if (nextBtn) nextBtn.disabled = this.currentPage[tableType] >= totalPages;
    }

    changePage(tableType, direction) {
        const totalItems = {
            'orders': this.getOrders().length,
            'products': this.getProducts().length,
            'users': this.getUsers().length
        }[tableType];

        const totalPages = Math.ceil(totalItems / this.itemsPerPage);
        const newPage = this.currentPage[tableType] + direction;

        if (newPage >= 1 && newPage <= totalPages) {
            this.currentPage[tableType] = newPage;
            this.loadSectionData(tableType);
        }
    }

    // === –§–û–†–ú–´ ===
    showProductForm(product = null) {
        this.currentProduct = product;
        const modal = document.getElementById('productModal');
        const title = document.getElementById('productModalTitle');

        if (product) {
            title.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä';
            this.fillProductForm(product);
        } else {
            title.textContent = '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä';
            document.getElementById('productForm').reset();
            document.getElementById('imagePreview').innerHTML = '';
            this.uploadedImageName = null;
        }

        modal.style.display = 'block';
    }

    fillProductForm(product) {
        document.getElementById('productName').value = product.name;
        document.getElementById('productBrand').value = product.brand;
        document.getElementById('productPrice').value = product.price;
        document.getElementById('productCategory').value = product.category_id;
        document.getElementById('productDescription').value = product.description || '';
        document.getElementById('productStock').value = product.stock_quantity;

        if (product.image) {
            document.getElementById('imagePreview').innerHTML = `
                <div class="image-preview">
                    <img src="${this.getProductImageUrl(product.image)}" alt="${product.name}">
                    <button type="button" onclick="removeImagePreview()" class="btn btn-delete">√ó</button>
                </div>
            `;
        }
    }

    saveProduct() {
        const formData = new FormData(document.getElementById('productForm'));
        const productData = {
            id: this.currentProduct ? this.currentProduct.id : this.generateId('products'),
            name: formData.get('name'),
            brand: formData.get('brand'),
            price: parseFloat(formData.get('price')),
            category_id: parseInt(formData.get('category_id')),
            description: formData.get('description'),
            stock_quantity: parseInt(formData.get('stock_quantity')) || 0,
            status: 'active',
            image: this.uploadedImageName || this.currentProduct?.image || 'default.jpg',
            created: this.currentProduct ? this.currentProduct.created : new Date().toISOString()
        };

        const products = this.getProducts();
        
        if (this.currentProduct) {
            const index = products.findIndex(p => p.id === this.currentProduct.id);
            if (index !== -1) products[index] = productData;
        } else {
            products.push(productData);
        }

        localStorage.setItem('admin_products', JSON.stringify(products));
        this.showNotification('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!', 'success');
        this.closeModal('productModal');
        this.loadProductsData();
    }

    // === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===
    getProductImageUrl(imageName) {
        if (!imageName) return 'https://via.placeholder.com/300x300/FFE8E8/333?text=–ù–µ—Ç+–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è';
        
        const images = JSON.parse(localStorage.getItem('product_images') || '{}');
        return images[imageName] || `images/products/${imageName}`;
    }

    getStatusColor(status) {
        const colors = {
            'pending': '#ffc107',
            'confirmed': '#17a2b8',
            'shipped': '#6c757d',
            'delivered': '#28a745',
            'cancelled': '#dc3545'
        };
        return colors[status] || '#6c757d';
    }

    formatDate(dateString) {
        const date = new Date(dateString);
        return date.toLocaleDateString('ru-RU') + ' ' + date.toLocaleTimeString('ru-RU', { 
            hour: '2-digit', 
            minute: '2-digit' 
        });
    }

    generateId(tableType) {
        const data = this[`get${tableType.charAt(0).toUpperCase() + tableType.slice(1)}`]();
        return data.length > 0 ? Math.max(...data.map(item => item.id)) + 1 : 1;
    }

    showNotification(message, type = 'success') {
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.textContent = message;
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: ${type === 'success' ? '#28a745' : '#dc3545'};
            color: white;
            padding: 1rem 1.5rem;
            border-radius: 5px;
            z-index: 10000;
            animation: slideInRight 0.3s ease;
        `;
        
        document.body.appendChild(notification);
        setTimeout(() => notification.remove(), 3000);
    }

    closeModal(modalId) {
        document.getElementById(modalId).style.display = 'none';
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function showProductForm(product = null) {
    new AdminPanel().showProductForm(product);
}

function showUserForm(user = null) {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    alert('–§–æ—Ä–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞');
}

function closeModal(modalId) {
    document.getElementById(modalId).style.display = 'none';
}

function removeImagePreview() {
    document.getElementById('imagePreview').innerHTML = '';
    document.getElementById('imageUpload').value = '';
}

function updateOrderStatus(orderId, status) {
    const adminPanel = new AdminPanel();
    const orders = adminPanel.getOrders();
    const orderIndex = orders.findIndex(o => o.id === orderId);
    
    if (orderIndex !== -1) {
        orders[orderIndex].status = status;
        localStorage.setItem('admin_orders', JSON.stringify(orders));
        adminPanel.showNotification(`–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #${orderId} –∏–∑–º–µ–Ω–µ–Ω`, 'success');
        adminPanel.loadOrdersData();
    }
}

function viewOrderDetails(orderId) {
    const adminPanel = new AdminPanel();
    const orders = adminPanel.getOrders();
    const order = orders.find(o => o.id === orderId);
    
    if (order) {
        document.getElementById('orderDetailsId').textContent = orderId;
        document.getElementById('orderDetailsContent').innerHTML = `
            <div class="order-details">
                <div class="order-info">
                    <div>
                        <h4>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ</h4>
                        <p><strong>–ò–º—è:</strong> ${order.user_name}</p>
                        <p><strong>Email:</strong> ${order.user_email}</p>
                        <p><strong>–ê–¥—Ä–µ—Å:</strong> ${order.address}</p>
                    </div>
                    <div>
                        <h4>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ</h4>
                        <p><strong>–°—Ç–∞—Ç—É—Å:</strong> <span class="status-${order.status}">${order.status}</span></p>
                        <p><strong>–î–∞—Ç–∞:</strong> ${adminPanel.formatDate(order.created)}</p>
                        <p><strong>–û–±—â–∞—è —Å—É–º–º–∞:</strong> ${order.total} —Ä—É–±.</p>
                    </div>
                </div>
                
                <div class="order-items">
                    <h4>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞</h4>
                    ${order.items.map(item => `
                        <div class="order-item">
                            <span>${item.name} √ó ${item.quantity}</span>
                            <span>${item.price * item.quantity} —Ä—É–±.</span>
                        </div>
                    `).join('')}
                </div>
            </div>
        `;
        document.getElementById('orderDetailsModal').style.display = 'block';
    }
}

function editProduct(productId) {
    const adminPanel = new AdminPanel();
    const products = adminPanel.getProducts();
    const product = products.find(p => p.id === productId);
    if (product) adminPanel.showProductForm(product);
}

function deleteProduct(productId) {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?')) {
        const adminPanel = new AdminPanel();
        const products = adminPanel.getProducts().filter(p => p.id !== productId);
        localStorage.setItem('admin_products', JSON.stringify(products));
        adminPanel.showNotification('–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω', 'success');
        adminPanel.loadProductsData();
    }
}

function editOrder(orderId) {
    alert(`–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ #${orderId} –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ`);
}

function deleteOrder(orderId) {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑?')) {
        const adminPanel = new AdminPanel();
        const orders = adminPanel.getOrders().filter(o => o.id !== orderId);
        localStorage.setItem('admin_orders', JSON.stringify(orders));
        adminPanel.showNotification('–ó–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω', 'success');
        adminPanel.loadOrdersData();
    }
}

function viewUser(userId) {
    alert(`–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è #${userId} –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω`);
}

function editUser(userId) {
    alert(`–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è #${userId} –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ`);
}

function sortTable(tableType, columnIndex) {
    alert(`–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã ${tableType} –ø–æ –∫–æ–ª–æ–Ω–∫–µ ${columnIndex} –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞`);
}

function changePage(tableType, direction) {
    new AdminPanel().changePage(tableType, direction);
}

function exportOrders() {
    const adminPanel = new AdminPanel();
    const orders = adminPanel.getOrders();
    const csvContent = "data:text/csv;charset=utf-8," 
        + "ID,–ö–ª–∏–µ–Ω—Ç,Email,–°—É–º–º–∞,–°—Ç–∞—Ç—É—Å,–î–∞—Ç–∞\n"
        + orders.map(order => 
            `"${order.id}","${order.user_name}","${order.user_email}","${order.total}","${order.status}","${adminPanel.formatDate(order.created)}"`
        ).join("\n");
    
    const encodedUri = encodeURI(csvContent);
    const link = document.createElement("a");
    link.setAttribute("href", encodedUri);
    link.setAttribute("download", "orders_export.csv");
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    adminPanel.showNotification('–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω', 'success');
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
window.addEventListener('click', (e) => {
    if (e.target.classList.contains('modal')) {
        e.target.style.display = 'none';
    }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    new AdminPanel();
});
